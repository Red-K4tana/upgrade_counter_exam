{"version":3,"sources":["components/Display.module.css","components/Button.module.css","components/Setting.module.css","components/Display.tsx","components/Button.tsx","LocalStarage.ts","Counter.tsx","components/Input.tsx","Setting.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Display","props","className","s","display","disButton","errorMessage","value","maxValue","numberOver","number","message","Button","disabled","dis","button","onClick","callback","name","saveState","key","state","stateAsString","JSON","stringify","localStorage","setItem","restoreState","getItem","parse","Counter","startValue","Number","styleDisco","r","Math","floor","random","g","b","discoButtons","border","margin","width","height","discoMain","transition","style","counter","setCounter","Input","i","input","type","onChange","e","changeValue","currentTarget","Setting","settingField","setMaxValue","setStartValue","setValue","App","useState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d31340ce.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Display_display__1xstH\",\"number\":\"Display_number__1COkd\",\"numberOver\":\"Display_numberOver__1iU4p\",\"message\":\"Display_message__3IFST\",\"errorMessage\":\"Display_errorMessage__2uVP3\",\"input\":\"Display_input__29aiS\",\"error\":\"Display_error__36oAM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__1_xah\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingField\":\"Setting_settingField__1s5H2\"};","import React from \"react\";\r\nimport s from './Display.module.css';\r\n\r\ntype propsDisplayType = {\r\n    value: number\r\n    maxValue: number\r\n    disButton: () => boolean\r\n    errorMessage: () => boolean\r\n}\r\n\r\nexport const Display = (props: propsDisplayType) => {\r\n\r\n    const forRenderOnDisplay = () => {\r\n        if (!props.disButton()/*button enable*/) {\r\n            return <div className={s.message}>enter values and press 'set'</div>\r\n        } else if (props.disButton()/*button disable*/) {\r\n            if (props.errorMessage()) {\r\n                return <div className={s.errorMessage}>incorrect value!</div>\r\n            }\r\n            return <div className={props.value >= props.maxValue ? s.numberOver : s.number}>{props.value}</div>\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.display}>\r\n            {forRenderOnDisplay()}\r\n        </div>\r\n\r\n    )\r\n}","import React from \"react\";\r\nimport s from './Button.module.css'\r\n\r\ntype propsButtonType = {\r\n    name: string\r\n    callback: () => void\r\n    dis?: boolean\r\n\r\n}\r\n\r\nexport const Button = (props: propsButtonType) => {\r\n    const onClickHandler = () => {\r\n        props.callback()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <button disabled={props.dis} className={s.button} onClick={onClickHandler}>{props.name}</button>\r\n        </div>\r\n    )\r\n}","export const saveState = (key: string, state: string) => {\r\n    const stateAsString = JSON.stringify(state)\r\n    localStorage.setItem(key, stateAsString)\r\n}\r\n\r\nexport const restoreState = (key: string) => {\r\n    const stateAsString = localStorage.getItem(key)\r\n    if (stateAsString !== null) return JSON.parse(stateAsString) as string\r\n}\r\n\r\n\r\nsaveState('startValue', '0')\r\nsaveState('maxValue', '5')\r\n","import React from \"react\";\r\nimport {Display} from \"./components/Display\";\r\nimport {Button} from \"./components/Button\";\r\nimport {restoreState} from \"./LocalStarage\";\r\n\r\ntype CounterPropsType = {\r\n    setCounter: (value: number) => void\r\n    counter: number\r\n    disButton: () => boolean\r\n    errorMessage: () => boolean\r\n}\r\n\r\nexport const Counter = (props: CounterPropsType) => {\r\n    let startValue = Number(restoreState('startValue'))\r\n    let maxValue = Number(restoreState('maxValue'))\r\n\r\n    const onIncreaseHandler = () => {\r\n        props.setCounter(props.counter + 1)\r\n    }\r\n    const onDropHandler = () => {\r\n        props.setCounter(startValue)\r\n    }\r\n\r\n    const disButtonIncrease = () => {\r\n        if (props.counter >= maxValue || props.errorMessage()) {\r\n            return true\r\n        } else return !props.disButton();\r\n    }\r\n    const disButtonDrop = () => {\r\n        if (props.counter === startValue || props.errorMessage()) {\r\n            return true\r\n        } else return !props.disButton();\r\n    }\r\n\r\n\r\n//-----------------------------------STYLE----------------------------------------\r\n    const styleDisco = () => {\r\n        let r = Math.floor(Math.random() * 255)\r\n        let g = Math.floor(Math.random() * 255)\r\n        let b = Math.floor(Math.random() * 255)\r\n        return (`rgb(${r},${g},${b})`)\r\n    }\r\n    const discoButtons = {\r\n        border: `2px solid ${styleDisco()}`,\r\n        display: 'flex',\r\n        'justify-content': 'space-around',\r\n        margin: '10px',\r\n        width: 'auto',\r\n        height: '30px',\r\n        'background-color': `${styleDisco()}`,\r\n        'border-radius': '5px',\r\n    }\r\n    const discoMain = {\r\n        margin: '30px',\r\n        width: '200px',\r\n        height: '150px',\r\n        border: `2px solid ${styleDisco()}`,\r\n        'background-color': `${styleDisco()}`,\r\n        'border-radius': '10px',\r\n        'box-shadow': `0 0 30px 5px ${styleDisco()}`,\r\n        transition: '1s box-shadow',\r\n    }\r\n//--------------------------------------------------------------------------------\r\n    return (\r\n        <div style={discoMain}>\r\n            <Display value={props.counter} maxValue={maxValue} disButton={props.disButton}\r\n                     errorMessage={props.errorMessage}/>\r\n            <div style={discoButtons}>\r\n\r\n                <Button name={'increase'} callback={onIncreaseHandler} dis={disButtonIncrease()}/>\r\n\r\n                <Button name={'drop'} callback={onDropHandler} dis={disButtonDrop()}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent} from 'react';\r\nimport i from './Display.module.css'\r\n\r\ntype SelectPropsType = {\r\n    changeValue: (value: string) => void\r\n    value: string\r\n}\r\n\r\nexport const Input = (props: SelectPropsType) => {\r\n\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeValue(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <input className={i.input} type='number' value={props.value} onChange={onChangeCallback}>\r\n\r\n        </input>\r\n    );\r\n};\r\n\r\n","import React from \"react\";\r\nimport s from './components/Setting.module.css'\r\nimport {Button} from \"./components/Button\";\r\nimport {Input} from \"./components/Input\";\r\n\r\ntype SettingPropsType = {\r\n    setMaxValue: (value: string) => void\r\n    setStartValue: (value: string) => void\r\n    maxValue: string\r\n    startValue: string\r\n    setValue: () => void\r\n    disButton: () => boolean\r\n}\r\nexport const Setting = (props: SettingPropsType) => {\r\n//-----------------------------------STYLE----------------------------------------\r\n    const styleDisco = () => {\r\n        let r = Math.floor(Math.random() * 255)\r\n        let g = Math.floor(Math.random() * 255)\r\n        let b = Math.floor(Math.random() * 255)\r\n        return (`rgb(${r},${g},${b})`)\r\n    }\r\n    const discoMain = {\r\n        margin: '30px',\r\n        width: '200px',\r\n        height: '150px',\r\n        border: `2px solid ${styleDisco()}`,\r\n        'background-color': `${styleDisco()}`,\r\n        'border-radius': '10px',\r\n        'box-shadow': `0 0 30px 5px ${styleDisco()}`,\r\n        transition: '1s box-shadow',\r\n    }\r\n//--------------------------------------------------------------------------------\r\n\r\n\r\n    return (\r\n        <div style={discoMain}>\r\n            <div className={s.settingField}>\r\n                <div>\r\n                    Max value\r\n                    <Input changeValue={props.setMaxValue} value={props.maxValue}/>\r\n                </div>\r\n                <div>\r\n                    Start value\r\n                    <Input changeValue={props.setStartValue} value={props.startValue}/>\r\n                </div>\r\n            </div>\r\n            <Button dis={props.disButton()} name={'set'} callback={props.setValue}/>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\nimport './App.css';\nimport {Counter} from \"./Counter\";\nimport {Setting} from \"./Setting\";\nimport {restoreState, saveState} from \"./LocalStarage\";\n\nfunction App() {\n    const [maxValue, setMaxValue] = useState('5')\n    const [startValue, setStartValue] = useState('0')\n    const [counter, setCounter] = useState(Number(startValue))\n\n    const setValue = () => {\n        saveState('maxValue', maxValue)\n        saveState('startValue', startValue)\n        setCounter(Number(startValue))\n    }\n\n    const disButton = () => {\n        if (Number(maxValue) <= Number(startValue)) {\n            return true\n        } else if (Number(maxValue) < 0 || Number(startValue) < 0) {\n            return true\n        } else {\n            return Number(maxValue) === Number(restoreState('maxValue')) && Number(startValue) === Number(restoreState('startValue'));\n        }\n    }\n    const errorMessage = () => {\n        return Number(maxValue) <= Number(startValue) || Number(maxValue) === Number(startValue) || (Number(maxValue) < 0 || Number(startValue) < 0);\n    }\n\n\n    return (\n        <div className=\"App\">\n            <Setting\n                setMaxValue={setMaxValue}\n                setStartValue={setStartValue}\n                maxValue={maxValue}\n                startValue={startValue}\n                setValue={setValue}\n                disButton={disButton}\n            />\n            <Counter setCounter={setCounter} counter={counter} disButton={disButton} errorMessage={errorMessage}/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}